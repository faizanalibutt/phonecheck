package com.upgenicsint.phonecheck.test.hardware

import android.content.Context
import android.os.Build
import android.view.KeyCharacterMap
import android.view.KeyEvent
import android.widget.Toast

import com.farhanahmed.cabinet.operations.GetOperation
import com.farhanahmed.cabinet.operations.StoreOperation
import com.upgenicsint.phonecheck.Loader
import com.upgenicsint.phonecheck.R
import com.upgenicsint.phonecheck.activities.SPenActivity
import com.upgenicsint.phonecheck.activities.SpenButtonsTestActivity
import com.upgenicsint.phonecheck.containsIgnoreCase
import com.upgenicsint.phonecheck.models.HardwareTest
import com.upgenicsint.phonecheck.models.RecordTest
import com.upgenicsint.phonecheck.test.SubTest
import com.upgenicsint.phonecheck.test.Test
import com.upgenicsint.phonecheck.utils.Utils

import org.json.JSONException

/**
 * Created by farhanahmed on 21/10/2016.
 */

class SPenTest(context: Context) : Test(context) {

    @JvmField
    var isHovered: Boolean = false
    @JvmField
    var isRemoved: Boolean = false
    @JvmField
    var isMenuPressed1 = 2
    @JvmField
    var isBackPressed1 = 2

    var hardwareTestArrayList2 = mutableListOf<HardwareTest>()

    override val jsonKey: String
        get() = spenTestKey

    override val title: String
        get() = "S Pen"

    override val detail: String
        get() = context.getString(R.string.spen_desc)

    override val iconResource: Int
        get() = R.drawable.spen

    override val activityRequestCode: Int
        get() = SPenActivity.REQ

    override val hasSubTest: Boolean
        get() = true

    init {
        if (Loader.instance.isTestListLoaded && Loader.instance.filterContains(spenButtonTestKey)) {

            val sharedPreferences = context.getSharedPreferences(context.getString(R.string.record_tests), Context.MODE_PRIVATE).edit()
            sharedPreferences.putInt(context.getString(R.string.record_spenbuttons), Loader.instance.RECORD_COUNTER).apply()
            Loader.instance.RECORD_COUNTER++
            Loader.instance.recordList.add(RecordTest(context.getString(R.string.report_spenbutton_test), SpenButtonsTestActivity.SPENBUTTON_SCREEN_TIME))

            if (Utils.hasMenuButton(context)) {
                val subTest = SubTest(context.getString(R.string.menu_button))
                subTests.put(spenMenu, subTest)
                hardwareTestArrayList2.add(HardwareTest(R.drawable.recent_button, R.drawable.recent_button_pass, KeyEvent.KEYCODE_MENU, subTest))
            }
            if (ButtonTest.hasBackButton(context)) {
                val subTest = SubTest(context.getString(R.string.back_button))
                subTests.put(spenRecent, subTest)
                hardwareTestArrayList2.add(HardwareTest(R.drawable.back_button, R.drawable.back_button_pass, KeyEvent.KEYCODE_BACK, subTest))

            }
        }
    }

    override fun perform(context: Context, autoPerformMode: Boolean): Int {
        super.perform(context, autoPerformMode)
        startIntent(context, SPenActivity::class.java, activityRequestCode)
        return status

    }

    fun getKeyForKeyCode(keyCode: Int): HardwareTest? {
        for (hardwareTest in hardwareTestArrayList2) {
            if (hardwareTest.keyCode == keyCode) {
                return hardwareTest
            }
        }
        return null
    }

    @Throws(JSONException::class)
    override fun onSaveState(storeOperation: StoreOperation) {
        storeOperation.add(spenTestKey, status)
                .add(spenRemoveTestKey, isRemoved)
                .add(spenHoverTestKey, isHovered)
                .add(spenRecent, isBackPressed)
                .add(spenMenu, isMenuPressed)
                .save()
        Loader.RESULT.put(spenTestKey, toJsonStatus())
        Loader.RESULT.put(spenRemoveTestKey, if (isRemoved) PASS else FAILED)
        Loader.RESULT.put(spenHoverTestKey, if (isHovered) PASS else FAILED)
        Loader.RESULT.put(spenMenu, if (isMenuPressed) PASS else FAILED)
        Loader.RESULT.put(spenRecent, if (isBackPressed) PASS else FAILED)
        super.onSaveState(storeOperation)
    }

    @Throws(JSONException::class)
    override fun onRestoreState(getOperation: GetOperation): Boolean {
        status = getOperation.getInt(spenTestKey, status)

//        isBackPressed1 = getOperation.getInt(Test.spenRecent, -1)
//        isMenuPressed1 = getOperation.getInt(Test.spenMenu, -1)

        isBackPressed1 = if (isBackPressed) 1 else 0
        isMenuPressed1 = if (isMenuPressed) 1 else 0

        isBackPressed = isBackPressed1 == 0
        isMenuPressed = isMenuPressed1 == 0

        isHovered = getOperation.getBoolean(spenHoverTestKey, false)
        isRemoved = getOperation.getBoolean(spenRemoveTestKey, false)
        Loader.RESULT.put(spenTestKey, toJsonStatus())
        Loader.RESULT.put(spenRemoveTestKey, if (isRemoved) PASS else FAILED)
        Loader.RESULT.put(spenHoverTestKey, if (isHovered) PASS else FAILED)
        Loader.RESULT.put(spenMenu, if (isMenuPressed) PASS else FAILED)
        Loader.RESULT.put(spenRecent, if (isBackPressed) PASS else FAILED)
        return super.onRestoreState(getOperation)
    }

    override fun requireActivity(): Boolean {
        return true
    }

    override fun requireUserInteraction(): Boolean {
        return false
    }

    companion object {
        @JvmField
        val ACTIVE_KEYCODE_1015 = 1015
        @JvmField
        val ACTIVE_KEYCODE_275 = 275
        @JvmField
        val ACTIVE_KEYCODE_238 = 238
        @JvmField
        val BIXBY_KEYCODE_1082 = 1082

        @JvmField
        var isMenuPressed = false
        @JvmField
        var isBackPressed = false

        @JvmStatic
        fun hasBackButton(context: Context): Boolean {
            if (KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK) || Utils.hasNavBar(context.resources)) {
                return true
            } else if (Build.MODEL.containsIgnoreCase("SM-J700")) {
                return true
            }
            return false
        }
    }
}
